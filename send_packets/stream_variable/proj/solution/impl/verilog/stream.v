// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2L-e,HLS_INPUT_CLOCK=2.778000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.154000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=345,HLS_SYN_LUT=838,HLS_VERSION=2019_2_1}" *)

module stream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        candin_0_V,
        candin_1_V,
        candin_2_V,
        candin_3_V,
        candout_V,
        candout_V_ap_vld,
        eventstart,
        lastvalid,
        first,
        first_ap_vld,
        last,
        last_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    ap_const_lv67_0 = 67'd0;




input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] candin_0_V;
input  [63:0] candin_1_V;
input  [63:0] candin_2_V;
input  [63:0] candin_3_V;
output  [63:0] candout_V;
output   candout_V_ap_vld;
input   eventstart;
input   lastvalid;
output   first;
output   first_ap_vld;
output   last;
output   last_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] candout_V;
reg candout_V_ap_vld;
reg first;
reg first_ap_vld;
reg last;
reg last_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] write_r;
reg   [8:0] ptrsep_V;
reg   [8:0] wrptr_V;
wire   [8:0] brams_V_0_address0;
reg    brams_V_0_ce0;
reg    brams_V_0_we0;
wire   [66:0] brams_V_0_d0;
wire   [8:0] brams_V_0_address1;
reg    brams_V_0_ce1;
wire   [66:0] brams_V_0_q1;
wire   [8:0] brams_V_1_address0;
reg    brams_V_1_ce0;
reg    brams_V_1_we0;
wire   [66:0] brams_V_1_d0;
wire   [8:0] brams_V_1_address1;
reg    brams_V_1_ce1;
wire   [66:0] brams_V_1_q1;
wire   [8:0] brams_V_2_address0;
reg    brams_V_2_ce0;
reg    brams_V_2_we0;
wire   [66:0] brams_V_2_d0;
wire   [8:0] brams_V_2_address1;
reg    brams_V_2_ce1;
wire   [66:0] brams_V_2_q1;
wire   [8:0] brams_V_3_address0;
reg    brams_V_3_ce0;
reg    brams_V_3_we0;
wire   [66:0] brams_V_3_d0;
wire   [8:0] brams_V_3_address1;
reg    brams_V_3_ce1;
wire   [66:0] brams_V_3_q1;
reg   [8:0] rdptr_V;
reg   [1:0] readidx_V;
reg   [8:0] t_V_3_reg_258;
reg   [0:0] lastvalid_read_reg_772;
reg   [0:0] eventstart_read_reg_783;
reg   [63:0] candin_0_V_read_reg_789;
wire   [0:0] icmp_ln879_fu_335_p2;
reg   [0:0] icmp_ln879_reg_795;
reg   [63:0] candin_1_V_read_reg_803;
wire   [0:0] icmp_ln879_2_fu_341_p2;
reg   [0:0] icmp_ln879_2_reg_808;
reg   [63:0] candin_2_V_read_reg_814;
wire   [0:0] icmp_ln879_4_fu_347_p2;
reg   [0:0] icmp_ln879_4_reg_819;
reg   [63:0] candin_3_V_read_reg_825;
wire   [0:0] icmp_ln879_3_fu_353_p2;
reg   [0:0] icmp_ln879_3_reg_830;
wire   [0:0] icmp_ln791_fu_365_p2;
reg   [0:0] icmp_ln791_reg_836;
wire   [0:0] icmp_ln791_1_fu_371_p2;
reg   [0:0] icmp_ln791_1_reg_841;
wire   [0:0] or_ln27_fu_381_p2;
reg   [0:0] or_ln27_reg_847;
wire   [0:0] or_ln69_fu_635_p2;
wire   [0:0] icmp_ln895_fu_662_p2;
reg   [0:0] icmp_ln895_reg_855;
reg   [1:0] readidx_V_load_reg_859;
wire   [0:0] icmp_ln879_1_fu_684_p2;
reg   [0:0] icmp_ln879_1_reg_885;
wire   [8:0] add_ln701_fu_702_p2;
reg    ap_block_pp0_stage0_subdone;
reg   [8:0] ap_phi_mux_t_V_3_phi_fu_261_p4;
wire   [8:0] add_ln700_1_fu_655_p2;
wire   [8:0] ap_phi_reg_pp0_iter2_t_V_3_reg_258;
wire   [0:0] ap_phi_reg_pp0_iter0_ptrsep_V_flag_0_reg_268;
reg   [0:0] ap_phi_reg_pp0_iter1_ptrsep_V_flag_0_reg_268;
reg   [0:0] ap_phi_reg_pp0_iter2_ptrsep_V_flag_0_reg_268;
reg   [0:0] ap_phi_reg_pp0_iter3_ptrsep_V_flag_0_reg_268;
reg   [0:0] ap_phi_mux_ptrsep_V_flag_1_phi_fu_285_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_ptrsep_V_flag_1_reg_281;
reg   [0:0] ap_phi_reg_pp0_iter1_ptrsep_V_flag_1_reg_281;
reg   [0:0] ap_phi_reg_pp0_iter2_ptrsep_V_flag_1_reg_281;
reg   [0:0] ap_phi_reg_pp0_iter3_ptrsep_V_flag_1_reg_281;
reg   [8:0] ap_phi_mux_ptrsep_V_new_1_phi_fu_296_p4;
wire   [8:0] ap_phi_reg_pp0_iter0_ptrsep_V_new_1_reg_293;
reg   [8:0] ap_phi_reg_pp0_iter1_ptrsep_V_new_1_reg_293;
reg   [8:0] ap_phi_reg_pp0_iter2_ptrsep_V_new_1_reg_293;
reg   [8:0] ap_phi_reg_pp0_iter3_ptrsep_V_new_1_reg_293;
reg   [0:0] ap_phi_mux_ptrsep_V_flag_2_phi_fu_306_p4;
wire   [0:0] ap_phi_reg_pp0_iter3_ptrsep_V_flag_2_reg_303;
reg   [8:0] ap_phi_mux_ptrsep_V_new_2_phi_fu_317_p4;
wire   [8:0] ap_phi_reg_pp0_iter3_ptrsep_V_new_2_reg_314;
reg   [0:0] ap_phi_mux_p_0202_phi_fu_328_p4;
wire   [0:0] ap_phi_reg_pp0_iter3_p_0202_reg_325;
wire   [0:0] p_Result_2_fu_721_p1;
wire   [63:0] zext_ln544_fu_615_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln544_1_fu_672_p1;
wire   [0:0] xor_ln69_fu_639_p2;
reg   [8:0] ap_sig_allocacmp_t_V_1;
wire   [8:0] add_ln700_fu_623_p2;
wire   [8:0] add_ln700_2_fu_690_p2;
wire   [1:0] add_ln214_fu_755_p2;
reg   [1:0] ap_sig_allocacmp_readidx_V_load;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] or_ln791_fu_359_p2;
wire   [66:0] p_Result_18_1_fu_397_p5;
wire   [0:0] xor_ln879_fu_408_p2;
wire   [66:0] p_Result_18_2_fu_423_p5;
wire   [66:0] p_Result_18_3_fu_443_p5;
wire   [0:0] xor_ln879_1_fu_454_p2;
wire   [66:0] p_Result_s_fu_386_p5;
wire   [1:0] tmp_1_fu_469_p3;
reg   [66:0] tmp_3_fu_459_p4;
reg   [66:0] tmp_2_fu_434_p4;
wire   [0:0] and_ln791_fu_498_p2;
wire   [0:0] or_ln791_1_fu_512_p2;
wire   [0:0] or_ln791_2_fu_517_p2;
reg   [66:0] tmp_4_fu_488_p4;
reg   [66:0] tmp_5_fu_502_p4;
wire   [0:0] xor_ln791_fu_543_p2;
wire   [0:0] and_ln791_3_fu_552_p2;
wire   [0:0] and_ln791_2_fu_548_p2;
wire   [0:0] and_ln791_4_fu_557_p2;
wire   [0:0] and_ln791_1_fu_522_p2;
wire   [0:0] xor_ln791_1_fu_563_p2;
reg   [66:0] tmp_fu_413_p4;
wire   [0:0] and_ln791_5_fu_569_p2;
reg   [66:0] tmp_6_fu_575_p4;
wire   [66:0] sel_tmp1_fu_593_p5;
wire   [66:0] p_Result_3_3_fu_476_p5;
wire   [66:0] p_Val2_s_fu_708_p6;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 write_r = 1'd0;
#0 ptrsep_V = 9'd0;
#0 wrptr_V = 9'd0;
#0 rdptr_V = 9'd0;
#0 readidx_V = 2'd0;
end

stream_brams_V_0 #(
    .DataWidth( 67 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
brams_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(brams_V_0_address0),
    .ce0(brams_V_0_ce0),
    .we0(brams_V_0_we0),
    .d0(brams_V_0_d0),
    .address1(brams_V_0_address1),
    .ce1(brams_V_0_ce1),
    .q1(brams_V_0_q1)
);

stream_brams_V_0 #(
    .DataWidth( 67 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
brams_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(brams_V_1_address0),
    .ce0(brams_V_1_ce0),
    .we0(brams_V_1_we0),
    .d0(brams_V_1_d0),
    .address1(brams_V_1_address1),
    .ce1(brams_V_1_ce1),
    .q1(brams_V_1_q1)
);

stream_brams_V_0 #(
    .DataWidth( 67 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
brams_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(brams_V_2_address0),
    .ce0(brams_V_2_ce0),
    .we0(brams_V_2_we0),
    .d0(brams_V_2_d0),
    .address1(brams_V_2_address1),
    .ce1(brams_V_2_ce1),
    .q1(brams_V_2_q1)
);

stream_brams_V_0 #(
    .DataWidth( 67 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
brams_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(brams_V_3_address0),
    .ce0(brams_V_3_ce0),
    .we0(brams_V_3_we0),
    .d0(brams_V_3_d0),
    .address1(brams_V_3_address1),
    .ce1(brams_V_3_ce1),
    .q1(brams_V_3_q1)
);

stream_mux_42_67_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 67 ),
    .din1_WIDTH( 67 ),
    .din2_WIDTH( 67 ),
    .din3_WIDTH( 67 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 67 ))
stream_mux_42_67_bkb_U1(
    .din0(brams_V_0_q1),
    .din1(brams_V_1_q1),
    .din2(brams_V_2_q1),
    .din3(brams_V_3_q1),
    .din4(readidx_V_load_reg_859),
    .dout(p_Val2_s_fu_708_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((or_ln27_reg_847 == 1'd0)) begin
            ap_phi_reg_pp0_iter3_ptrsep_V_flag_0_reg_268 <= 1'd0;
        end else if ((or_ln27_reg_847 == 1'd1)) begin
            ap_phi_reg_pp0_iter3_ptrsep_V_flag_0_reg_268 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_ptrsep_V_flag_0_reg_268 <= ap_phi_reg_pp0_iter2_ptrsep_V_flag_0_reg_268;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln895_fu_662_p2 == 1'd0) & (icmp_ln879_1_fu_684_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter3_ptrsep_V_flag_1_reg_281 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_ptrsep_V_flag_1_reg_281 <= ap_phi_reg_pp0_iter2_ptrsep_V_flag_1_reg_281;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln895_fu_662_p2 == 1'd0) & (icmp_ln879_1_fu_684_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter3_ptrsep_V_new_1_reg_293 <= add_ln701_fu_702_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_ptrsep_V_new_1_reg_293 <= ap_phi_reg_pp0_iter2_ptrsep_V_new_1_reg_293;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((or_ln27_reg_847 == 1'd0)) begin
            t_V_3_reg_258 <= ap_sig_allocacmp_t_V_1;
        end else if ((or_ln27_reg_847 == 1'd1)) begin
            t_V_3_reg_258 <= add_ln700_1_fu_655_p2;
        end else if ((1'b1 == 1'b1)) begin
            t_V_3_reg_258 <= ap_phi_reg_pp0_iter2_t_V_3_reg_258;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_ptrsep_V_flag_0_reg_268 <= ap_phi_reg_pp0_iter0_ptrsep_V_flag_0_reg_268;
        ap_phi_reg_pp0_iter1_ptrsep_V_flag_1_reg_281 <= ap_phi_reg_pp0_iter0_ptrsep_V_flag_1_reg_281;
        ap_phi_reg_pp0_iter1_ptrsep_V_new_1_reg_293 <= ap_phi_reg_pp0_iter0_ptrsep_V_new_1_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_ptrsep_V_flag_0_reg_268 <= ap_phi_reg_pp0_iter1_ptrsep_V_flag_0_reg_268;
        ap_phi_reg_pp0_iter2_ptrsep_V_flag_1_reg_281 <= ap_phi_reg_pp0_iter1_ptrsep_V_flag_1_reg_281;
        ap_phi_reg_pp0_iter2_ptrsep_V_new_1_reg_293 <= ap_phi_reg_pp0_iter1_ptrsep_V_new_1_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        candin_0_V_read_reg_789 <= candin_0_V;
        candin_1_V_read_reg_803 <= candin_1_V;
        candin_2_V_read_reg_814 <= candin_2_V;
        candin_3_V_read_reg_825 <= candin_3_V;
        eventstart_read_reg_783 <= eventstart;
        icmp_ln791_1_reg_841 <= icmp_ln791_1_fu_371_p2;
        icmp_ln791_reg_836 <= icmp_ln791_fu_365_p2;
        icmp_ln879_2_reg_808 <= icmp_ln879_2_fu_341_p2;
        icmp_ln879_3_reg_830 <= icmp_ln879_3_fu_353_p2;
        icmp_ln879_4_reg_819 <= icmp_ln879_4_fu_347_p2;
        icmp_ln879_reg_795 <= icmp_ln879_fu_335_p2;
        lastvalid_read_reg_772 <= lastvalid;
        or_ln27_reg_847 <= or_ln27_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln895_fu_662_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln879_1_reg_885 <= icmp_ln879_1_fu_684_p2;
        readidx_V_load_reg_859 <= ap_sig_allocacmp_readidx_V_load;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln895_reg_855 <= icmp_ln895_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_phi_mux_ptrsep_V_flag_2_phi_fu_306_p4 == 1'd1))) begin
        ptrsep_V <= ap_phi_mux_ptrsep_V_new_2_phi_fu_317_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln895_fu_662_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln879_1_fu_684_p2 == 1'd1))) begin
        rdptr_V <= add_ln700_2_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln895_reg_855 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        readidx_V <= add_ln214_fu_755_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln69_fu_635_p2 == 1'd1))) begin
        write_r <= xor_ln69_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln27_fu_381_p2 == 1'd1))) begin
        wrptr_V <= add_ln700_fu_623_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln895_reg_855 == 1'd0)) begin
        ap_phi_mux_p_0202_phi_fu_328_p4 = p_Result_2_fu_721_p1;
    end else if ((icmp_ln895_reg_855 == 1'd1)) begin
        ap_phi_mux_p_0202_phi_fu_328_p4 = 1'd0;
    end else begin
        ap_phi_mux_p_0202_phi_fu_328_p4 = ap_phi_reg_pp0_iter3_p_0202_reg_325;
    end
end

always @ (*) begin
    if (((icmp_ln879_1_reg_885 == 1'd0) & (icmp_ln895_reg_855 == 1'd0))) begin
        ap_phi_mux_ptrsep_V_flag_1_phi_fu_285_p4 = ap_phi_reg_pp0_iter3_ptrsep_V_flag_0_reg_268;
    end else begin
        ap_phi_mux_ptrsep_V_flag_1_phi_fu_285_p4 = ap_phi_reg_pp0_iter3_ptrsep_V_flag_1_reg_281;
    end
end

always @ (*) begin
    if ((icmp_ln895_reg_855 == 1'd0)) begin
        ap_phi_mux_ptrsep_V_flag_2_phi_fu_306_p4 = ap_phi_mux_ptrsep_V_flag_1_phi_fu_285_p4;
    end else if ((icmp_ln895_reg_855 == 1'd1)) begin
        ap_phi_mux_ptrsep_V_flag_2_phi_fu_306_p4 = ap_phi_reg_pp0_iter3_ptrsep_V_flag_0_reg_268;
    end else begin
        ap_phi_mux_ptrsep_V_flag_2_phi_fu_306_p4 = ap_phi_reg_pp0_iter3_ptrsep_V_flag_2_reg_303;
    end
end

always @ (*) begin
    if (((icmp_ln879_1_reg_885 == 1'd0) & (icmp_ln895_reg_855 == 1'd0))) begin
        ap_phi_mux_ptrsep_V_new_1_phi_fu_296_p4 = t_V_3_reg_258;
    end else begin
        ap_phi_mux_ptrsep_V_new_1_phi_fu_296_p4 = ap_phi_reg_pp0_iter3_ptrsep_V_new_1_reg_293;
    end
end

always @ (*) begin
    if ((icmp_ln895_reg_855 == 1'd0)) begin
        ap_phi_mux_ptrsep_V_new_2_phi_fu_317_p4 = ap_phi_mux_ptrsep_V_new_1_phi_fu_296_p4;
    end else if ((icmp_ln895_reg_855 == 1'd1)) begin
        ap_phi_mux_ptrsep_V_new_2_phi_fu_317_p4 = 9'd0;
    end else begin
        ap_phi_mux_ptrsep_V_new_2_phi_fu_317_p4 = ap_phi_reg_pp0_iter3_ptrsep_V_new_2_reg_314;
    end
end

always @ (*) begin
    if ((or_ln27_reg_847 == 1'd0)) begin
        ap_phi_mux_t_V_3_phi_fu_261_p4 = ap_sig_allocacmp_t_V_1;
    end else if ((or_ln27_reg_847 == 1'd1)) begin
        ap_phi_mux_t_V_3_phi_fu_261_p4 = add_ln700_1_fu_655_p2;
    end else begin
        ap_phi_mux_t_V_3_phi_fu_261_p4 = ap_phi_reg_pp0_iter2_t_V_3_reg_258;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln895_reg_855 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_readidx_V_load = add_ln214_fu_755_p2;
    end else begin
        ap_sig_allocacmp_readidx_V_load = readidx_V;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_phi_mux_ptrsep_V_flag_2_phi_fu_306_p4 == 1'd1))) begin
        ap_sig_allocacmp_t_V_1 = ap_phi_mux_ptrsep_V_new_2_phi_fu_317_p4;
    end else begin
        ap_sig_allocacmp_t_V_1 = ptrsep_V;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        brams_V_0_ce0 = 1'b1;
    end else begin
        brams_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        brams_V_0_ce1 = 1'b1;
    end else begin
        brams_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln27_fu_381_p2 == 1'd1))) begin
        brams_V_0_we0 = 1'b1;
    end else begin
        brams_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        brams_V_1_ce0 = 1'b1;
    end else begin
        brams_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        brams_V_1_ce1 = 1'b1;
    end else begin
        brams_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln27_fu_381_p2 == 1'd1))) begin
        brams_V_1_we0 = 1'b1;
    end else begin
        brams_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        brams_V_2_ce0 = 1'b1;
    end else begin
        brams_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        brams_V_2_ce1 = 1'b1;
    end else begin
        brams_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln27_fu_381_p2 == 1'd1))) begin
        brams_V_2_we0 = 1'b1;
    end else begin
        brams_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        brams_V_3_ce0 = 1'b1;
    end else begin
        brams_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        brams_V_3_ce1 = 1'b1;
    end else begin
        brams_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln27_fu_381_p2 == 1'd1))) begin
        brams_V_3_we0 = 1'b1;
    end else begin
        brams_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln895_reg_855 == 1'd1)) begin
            candout_V = 64'd0;
        end else if ((icmp_ln895_reg_855 == 1'd0)) begin
            candout_V = {{p_Val2_s_fu_708_p6[66:3]}};
        end else begin
            candout_V = 'bx;
        end
    end else begin
        candout_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln895_reg_855 == 1'd1)) | ((icmp_ln895_reg_855 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        candout_V_ap_vld = 1'b1;
    end else begin
        candout_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln895_reg_855 == 1'd1)) begin
            first = 1'd0;
        end else if ((icmp_ln895_reg_855 == 1'd0)) begin
            first = p_Val2_s_fu_708_p6[32'd1];
        end else begin
            first = 'bx;
        end
    end else begin
        first = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln895_reg_855 == 1'd1)) | ((icmp_ln895_reg_855 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        first_ap_vld = 1'b1;
    end else begin
        first_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln895_reg_855 == 1'd1)) begin
            last = 1'd0;
        end else if ((icmp_ln895_reg_855 == 1'd0)) begin
            last = p_Val2_s_fu_708_p6[32'd2];
        end else begin
            last = 'bx;
        end
    end else begin
        last = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln895_reg_855 == 1'd1)) | ((icmp_ln895_reg_855 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        last_ap_vld = 1'b1;
    end else begin
        last_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_fu_755_p2 = (readidx_V_load_reg_859 + 2'd1);

assign add_ln700_1_fu_655_p2 = (ap_sig_allocacmp_t_V_1 + 9'd1);

assign add_ln700_2_fu_690_p2 = (rdptr_V + 9'd1);

assign add_ln700_fu_623_p2 = (wrptr_V + 9'd1);

assign add_ln701_fu_702_p2 = ($signed(ap_phi_mux_t_V_3_phi_fu_261_p4) + $signed(9'd511));

assign and_ln791_1_fu_522_p2 = (or_ln791_2_fu_517_p2 & icmp_ln791_reg_836);

assign and_ln791_2_fu_548_p2 = (lastvalid_read_reg_772 & icmp_ln879_2_reg_808);

assign and_ln791_3_fu_552_p2 = (xor_ln791_fu_543_p2 & icmp_ln879_reg_795);

assign and_ln791_4_fu_557_p2 = (and_ln791_3_fu_552_p2 & and_ln791_2_fu_548_p2);

assign and_ln791_5_fu_569_p2 = (xor_ln791_1_fu_563_p2 & and_ln791_1_fu_522_p2);

assign and_ln791_fu_498_p2 = (icmp_ln879_4_reg_819 & icmp_ln879_3_reg_830);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_ptrsep_V_flag_0_reg_268 = 'bx;

assign ap_phi_reg_pp0_iter0_ptrsep_V_flag_1_reg_281 = 'bx;

assign ap_phi_reg_pp0_iter0_ptrsep_V_new_1_reg_293 = 'bx;

assign ap_phi_reg_pp0_iter2_t_V_3_reg_258 = 'bx;

assign ap_phi_reg_pp0_iter3_p_0202_reg_325 = 'bx;

assign ap_phi_reg_pp0_iter3_ptrsep_V_flag_2_reg_303 = 'bx;

assign ap_phi_reg_pp0_iter3_ptrsep_V_new_2_reg_314 = 'bx;

assign ap_return = ap_phi_mux_p_0202_phi_fu_328_p4;

assign brams_V_0_address0 = zext_ln544_fu_615_p1;

assign brams_V_0_address1 = zext_ln544_1_fu_672_p1;

assign brams_V_0_d0 = ((lastvalid_read_reg_772[0:0] === 1'b1) ? sel_tmp1_fu_593_p5 : p_Result_3_3_fu_476_p5);

assign brams_V_1_address0 = zext_ln544_fu_615_p1;

assign brams_V_1_address1 = zext_ln544_1_fu_672_p1;

assign brams_V_1_d0 = ((lastvalid_read_reg_772[0:0] === 1'b1) ? tmp_6_fu_575_p4 : tmp_fu_413_p4);

assign brams_V_2_address0 = zext_ln544_fu_615_p1;

assign brams_V_2_address1 = zext_ln544_1_fu_672_p1;

assign brams_V_2_d0 = ((lastvalid_read_reg_772[0:0] === 1'b1) ? tmp_5_fu_502_p4 : tmp_2_fu_434_p4);

assign brams_V_3_address0 = zext_ln544_fu_615_p1;

assign brams_V_3_address1 = zext_ln544_1_fu_672_p1;

assign brams_V_3_d0 = ((lastvalid_read_reg_772[0:0] === 1'b1) ? tmp_4_fu_488_p4 : tmp_3_fu_459_p4);

assign icmp_ln791_1_fu_371_p2 = ((or_ln791_fu_359_p2 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_fu_365_p2 = ((or_ln791_fu_359_p2 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_684_p2 = ((ap_sig_allocacmp_readidx_V_load == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_341_p2 = ((candin_1_V == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_353_p2 = ((candin_3_V == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_347_p2 = ((candin_2_V != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_335_p2 = ((candin_0_V != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_662_p2 = ((ap_phi_mux_t_V_3_phi_fu_261_p4 == 9'd0) ? 1'b1 : 1'b0);

assign or_ln27_fu_381_p2 = (write_r | eventstart_read_reg_783);

assign or_ln69_fu_635_p2 = (lastvalid_read_reg_772 | eventstart_read_reg_783);

assign or_ln791_1_fu_512_p2 = (xor_ln879_fu_408_p2 | icmp_ln879_reg_795);

assign or_ln791_2_fu_517_p2 = (or_ln791_1_fu_512_p2 | icmp_ln791_1_reg_841);

assign or_ln791_fu_359_p2 = (candin_3_V | candin_2_V);

assign p_Result_18_1_fu_397_p5 = {{candin_1_V_read_reg_803}, {ap_const_lv67_0[2:0]}};

assign p_Result_18_2_fu_423_p5 = {{candin_2_V_read_reg_814}, {ap_const_lv67_0[2:0]}};

assign p_Result_18_3_fu_443_p5 = {{candin_3_V_read_reg_825}, {ap_const_lv67_0[2:0]}};

assign p_Result_2_fu_721_p1 = p_Val2_s_fu_708_p6[0:0];

assign p_Result_3_3_fu_476_p5 = {{p_Result_s_fu_386_p5[66:2]}, {tmp_1_fu_469_p3}};

assign p_Result_s_fu_386_p5 = {{candin_0_V_read_reg_789}, {ap_const_lv67_0[2:0]}};

assign sel_tmp1_fu_593_p5 = {{{{candin_0_V_read_reg_789}, {and_ln791_4_fu_557_p2}}, {1'd0}}, {icmp_ln879_reg_795}};

assign tmp_1_fu_469_p3 = {{1'd0}, {icmp_ln879_reg_795}};

always @ (*) begin
    tmp_2_fu_434_p4 = p_Result_18_2_fu_423_p5;
    tmp_2_fu_434_p4[32'd0] = |(icmp_ln879_4_reg_819);
end

always @ (*) begin
    tmp_3_fu_459_p4 = p_Result_18_3_fu_443_p5;
    tmp_3_fu_459_p4[32'd0] = |(xor_ln879_1_fu_454_p2);
end

always @ (*) begin
    tmp_4_fu_488_p4 = tmp_3_fu_459_p4;
    tmp_4_fu_488_p4[32'd2] = |(xor_ln879_1_fu_454_p2);
end

always @ (*) begin
    tmp_5_fu_502_p4 = tmp_2_fu_434_p4;
    tmp_5_fu_502_p4[32'd2] = |(and_ln791_fu_498_p2);
end

always @ (*) begin
    tmp_6_fu_575_p4 = tmp_fu_413_p4;
    tmp_6_fu_575_p4[32'd2] = |(and_ln791_5_fu_569_p2);
end

always @ (*) begin
    tmp_fu_413_p4 = p_Result_18_1_fu_397_p5;
    tmp_fu_413_p4[32'd0] = |(xor_ln879_fu_408_p2);
end

assign xor_ln69_fu_639_p2 = (lastvalid_read_reg_772 ^ 1'd1);

assign xor_ln791_1_fu_563_p2 = (1'd1 ^ and_ln791_4_fu_557_p2);

assign xor_ln791_fu_543_p2 = (icmp_ln791_1_reg_841 ^ 1'd1);

assign xor_ln879_1_fu_454_p2 = (icmp_ln879_3_reg_830 ^ 1'd1);

assign xor_ln879_fu_408_p2 = (icmp_ln879_2_reg_808 ^ 1'd1);

assign zext_ln544_1_fu_672_p1 = rdptr_V;

assign zext_ln544_fu_615_p1 = wrptr_V;

endmodule //stream
