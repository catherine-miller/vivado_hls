// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _stream_HH_
#define _stream_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "stream_mux_42_67_bkb.h"
#include "stream_brams_V_0.h"

namespace ap_rtl {

struct stream : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > candin_V_address0;
    sc_out< sc_logic > candin_V_ce0;
    sc_in< sc_lv<64> > candin_V_q0;
    sc_out< sc_lv<2> > candin_V_address1;
    sc_out< sc_logic > candin_V_ce1;
    sc_in< sc_lv<64> > candin_V_q1;
    sc_out< sc_lv<64> > candout_V;
    sc_out< sc_logic > candout_V_ap_vld;
    sc_in< sc_logic > eventstart;
    sc_in< sc_logic > lastvalid;
    sc_out< sc_logic > first;
    sc_out< sc_logic > first_ap_vld;
    sc_out< sc_logic > last;
    sc_out< sc_logic > last_ap_vld;
    sc_out< sc_lv<1> > ap_return;


    // Module declarations
    stream(sc_module_name name);
    SC_HAS_PROCESS(stream);

    ~stream();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    stream_brams_V_0* brams_V_0_U;
    stream_brams_V_0* brams_V_1_U;
    stream_brams_V_0* brams_V_2_U;
    stream_brams_V_0* brams_V_3_U;
    stream_mux_42_67_bkb<1,1,67,67,67,67,2,67>* stream_mux_42_67_bkb_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<1> > write_r;
    sc_signal< sc_lv<9> > ptrsep_V;
    sc_signal< sc_lv<9> > wrptr_V;
    sc_signal< sc_lv<9> > brams_V_0_address0;
    sc_signal< sc_logic > brams_V_0_ce0;
    sc_signal< sc_logic > brams_V_0_we0;
    sc_signal< sc_lv<67> > brams_V_0_d0;
    sc_signal< sc_lv<67> > brams_V_0_q0;
    sc_signal< sc_lv<9> > brams_V_1_address0;
    sc_signal< sc_logic > brams_V_1_ce0;
    sc_signal< sc_logic > brams_V_1_we0;
    sc_signal< sc_lv<67> > brams_V_1_d0;
    sc_signal< sc_lv<67> > brams_V_1_q0;
    sc_signal< sc_lv<9> > brams_V_2_address0;
    sc_signal< sc_logic > brams_V_2_ce0;
    sc_signal< sc_logic > brams_V_2_we0;
    sc_signal< sc_lv<67> > brams_V_2_d0;
    sc_signal< sc_lv<67> > brams_V_2_q0;
    sc_signal< sc_lv<9> > brams_V_3_address0;
    sc_signal< sc_logic > brams_V_3_ce0;
    sc_signal< sc_logic > brams_V_3_we0;
    sc_signal< sc_lv<67> > brams_V_3_d0;
    sc_signal< sc_lv<67> > brams_V_3_q0;
    sc_signal< sc_lv<9> > rdptr_V;
    sc_signal< sc_lv<2> > readidx;
    sc_signal< sc_lv<9> > t_V_3_reg_278;
    sc_signal< sc_lv<64> > reg_370;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<1> > or_ln24_reg_721;
    sc_signal< sc_lv<64> > reg_374;
    sc_signal< sc_lv<1> > eventstart_read_reg_714;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > or_ln24_fu_382_p2;
    sc_signal< sc_lv<1> > grp_fu_358_p2;
    sc_signal< sc_lv<1> > icmp_ln883_reg_735;
    sc_signal< sc_lv<1> > grp_fu_364_p2;
    sc_signal< sc_lv<1> > icmp_ln883_1_reg_741;
    sc_signal< sc_lv<1> > lastvalid_read_reg_757;
    sc_signal< sc_lv<1> > icmp_ln883_2_reg_768;
    sc_signal< sc_lv<1> > icmp_ln883_3_reg_774;
    sc_signal< sc_lv<1> > or_ln11_fu_473_p2;
    sc_signal< sc_lv<1> > xor_ln11_fu_478_p2;
    sc_signal< sc_lv<64> > zext_ln544_fu_506_p1;
    sc_signal< sc_lv<64> > zext_ln544_reg_790;
    sc_signal< sc_lv<9> > add_ln700_1_fu_524_p2;
    sc_signal< sc_lv<1> > icmp_ln895_fu_602_p2;
    sc_signal< sc_lv<1> > icmp_ln895_reg_801;
    sc_signal< sc_lv<64> > zext_ln544_1_fu_618_p1;
    sc_signal< sc_lv<64> > zext_ln544_1_reg_805;
    sc_signal< sc_lv<2> > readidx_load_reg_811;
    sc_signal< sc_lv<1> > icmp_ln56_fu_628_p2;
    sc_signal< sc_lv<1> > icmp_ln56_reg_827;
    sc_signal< sc_lv<67> > brams_V_0_load_reg_831;
    sc_signal< sc_lv<67> > brams_V_1_load_reg_836;
    sc_signal< sc_lv<9> > add_ln701_fu_646_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_lv<1> > ap_phi_mux_write_flag_2_phi_fu_260_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_write_flag_2_reg_257;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_write_flag_2_reg_257;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_write_new_2_reg_267;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_write_new_2_reg_267;
    sc_signal< sc_lv<9> > ap_phi_reg_pp0_iter0_t_V_3_reg_278;
    sc_signal< sc_lv<9> > ap_phi_reg_pp0_iter1_t_V_3_reg_278;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_ptrsep_V_flag_0_reg_288;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_ptrsep_V_flag_0_reg_288;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_ptrsep_V_flag_1_reg_302;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_ptrsep_V_flag_1_reg_302;
    sc_signal< sc_lv<9> > ap_phi_reg_pp0_iter0_ptrsep_V_new_1_reg_314;
    sc_signal< sc_lv<9> > ap_phi_reg_pp0_iter1_ptrsep_V_new_1_reg_314;
    sc_signal< sc_lv<1> > ap_phi_mux_ptrsep_V_flag_2_phi_fu_327_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_ptrsep_V_flag_2_reg_324;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_ptrsep_V_flag_2_reg_324;
    sc_signal< sc_lv<9> > ap_phi_mux_ptrsep_V_new_2_phi_fu_339_p4;
    sc_signal< sc_lv<9> > ap_phi_reg_pp0_iter0_ptrsep_V_new_2_reg_335;
    sc_signal< sc_lv<9> > ap_phi_reg_pp0_iter1_ptrsep_V_new_2_reg_335;
    sc_signal< sc_lv<1> > ap_phi_mux_p_0258_phi_fu_351_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_p_0258_reg_347;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_p_0258_reg_347;
    sc_signal< sc_lv<1> > trunc_ln544_1_fu_663_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<1> > ap_sig_allocacmp_write_load;
    sc_signal< sc_lv<9> > ap_sig_allocacmp_t_V_1;
    sc_signal< sc_lv<9> > add_ln700_fu_512_p2;
    sc_signal< sc_lv<9> > add_ln700_2_fu_634_p2;
    sc_signal< sc_lv<2> > add_ln60_fu_697_p2;
    sc_signal< bool > ap_block_pp0_stage2_01001;
    sc_signal< sc_lv<1> > or_ln24_fu_382_p1;
    sc_signal< sc_lv<1> > xor_ln29_fu_392_p2;
    sc_signal< sc_lv<67> > or_ln_fu_397_p4;
    sc_signal< sc_lv<67> > or_ln700_fu_407_p2;
    sc_signal< sc_lv<67> > select_ln30_fu_413_p3;
    sc_signal< sc_lv<1> > xor_ln29_1_fu_427_p2;
    sc_signal< sc_lv<67> > or_ln29_1_fu_432_p4;
    sc_signal< sc_lv<67> > or_ln700_3_fu_442_p2;
    sc_signal< sc_lv<67> > select_ln11_fu_420_p3;
    sc_signal< sc_lv<1> > trunc_ln544_fu_455_p1;
    sc_signal< sc_lv<67> > or_ln700_4_fu_459_p2;
    sc_signal< sc_lv<1> > or_ln11_fu_473_p0;
    sc_signal< sc_lv<1> > xor_ln11_fu_478_p0;
    sc_signal< sc_lv<1> > select_ln11_3_fu_484_p0;
    sc_signal< sc_lv<67> > select_ln39_2_fu_448_p3;
    sc_signal< sc_lv<1> > select_ln11_4_fu_493_p0;
    sc_signal< sc_lv<67> > select_ln39_3_fu_465_p3;
    sc_signal< sc_lv<1> > xor_ln29_2_fu_530_p2;
    sc_signal< sc_lv<1> > xor_ln29_3_fu_545_p2;
    sc_signal< sc_lv<67> > or_ln29_3_fu_550_p4;
    sc_signal< sc_lv<67> > or_ln700_1_fu_560_p2;
    sc_signal< sc_lv<67> > or_ln29_2_fu_535_p4;
    sc_signal< sc_lv<67> > or_ln700_2_fu_573_p2;
    sc_signal< sc_lv<67> > select_ln39_fu_566_p3;
    sc_signal< sc_lv<67> > select_ln39_1_fu_579_p3;
    sc_signal< sc_lv<67> > tmp_fu_652_p6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_44;
    sc_signal< bool > ap_condition_320;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage2;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<67> ap_const_lv67_2;
    static const sc_lv<67> ap_const_lv67_4;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<9> ap_const_lv9_1FF;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_42;
    static const sc_lv<2> ap_const_lv2_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln60_fu_697_p2();
    void thread_add_ln700_1_fu_524_p2();
    void thread_add_ln700_2_fu_634_p2();
    void thread_add_ln700_fu_512_p2();
    void thread_add_ln701_fu_646_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_01001();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage2_iter1();
    void thread_ap_condition_320();
    void thread_ap_condition_44();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_phi_mux_p_0258_phi_fu_351_p4();
    void thread_ap_phi_mux_ptrsep_V_flag_2_phi_fu_327_p4();
    void thread_ap_phi_mux_ptrsep_V_new_2_phi_fu_339_p4();
    void thread_ap_phi_mux_write_flag_2_phi_fu_260_p4();
    void thread_ap_phi_reg_pp0_iter0_p_0258_reg_347();
    void thread_ap_phi_reg_pp0_iter0_ptrsep_V_flag_0_reg_288();
    void thread_ap_phi_reg_pp0_iter0_ptrsep_V_flag_1_reg_302();
    void thread_ap_phi_reg_pp0_iter0_ptrsep_V_flag_2_reg_324();
    void thread_ap_phi_reg_pp0_iter0_ptrsep_V_new_1_reg_314();
    void thread_ap_phi_reg_pp0_iter0_ptrsep_V_new_2_reg_335();
    void thread_ap_phi_reg_pp0_iter0_t_V_3_reg_278();
    void thread_ap_phi_reg_pp0_iter0_write_flag_2_reg_257();
    void thread_ap_phi_reg_pp0_iter0_write_new_2_reg_267();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_ap_sig_allocacmp_t_V_1();
    void thread_ap_sig_allocacmp_write_load();
    void thread_brams_V_0_address0();
    void thread_brams_V_0_ce0();
    void thread_brams_V_0_d0();
    void thread_brams_V_0_we0();
    void thread_brams_V_1_address0();
    void thread_brams_V_1_ce0();
    void thread_brams_V_1_d0();
    void thread_brams_V_1_we0();
    void thread_brams_V_2_address0();
    void thread_brams_V_2_ce0();
    void thread_brams_V_2_d0();
    void thread_brams_V_2_we0();
    void thread_brams_V_3_address0();
    void thread_brams_V_3_ce0();
    void thread_brams_V_3_d0();
    void thread_brams_V_3_we0();
    void thread_candin_V_address0();
    void thread_candin_V_address1();
    void thread_candin_V_ce0();
    void thread_candin_V_ce1();
    void thread_candout_V();
    void thread_candout_V_ap_vld();
    void thread_first();
    void thread_first_ap_vld();
    void thread_grp_fu_358_p2();
    void thread_grp_fu_364_p2();
    void thread_icmp_ln56_fu_628_p2();
    void thread_icmp_ln895_fu_602_p2();
    void thread_last();
    void thread_last_ap_vld();
    void thread_or_ln11_fu_473_p0();
    void thread_or_ln11_fu_473_p2();
    void thread_or_ln24_fu_382_p1();
    void thread_or_ln24_fu_382_p2();
    void thread_or_ln29_1_fu_432_p4();
    void thread_or_ln29_2_fu_535_p4();
    void thread_or_ln29_3_fu_550_p4();
    void thread_or_ln700_1_fu_560_p2();
    void thread_or_ln700_2_fu_573_p2();
    void thread_or_ln700_3_fu_442_p2();
    void thread_or_ln700_4_fu_459_p2();
    void thread_or_ln700_fu_407_p2();
    void thread_or_ln_fu_397_p4();
    void thread_select_ln11_3_fu_484_p0();
    void thread_select_ln11_4_fu_493_p0();
    void thread_select_ln11_fu_420_p3();
    void thread_select_ln30_fu_413_p3();
    void thread_select_ln39_1_fu_579_p3();
    void thread_select_ln39_2_fu_448_p3();
    void thread_select_ln39_3_fu_465_p3();
    void thread_select_ln39_fu_566_p3();
    void thread_trunc_ln544_1_fu_663_p1();
    void thread_trunc_ln544_fu_455_p1();
    void thread_xor_ln11_fu_478_p0();
    void thread_xor_ln11_fu_478_p2();
    void thread_xor_ln29_1_fu_427_p2();
    void thread_xor_ln29_2_fu_530_p2();
    void thread_xor_ln29_3_fu_545_p2();
    void thread_xor_ln29_fu_392_p2();
    void thread_zext_ln544_1_fu_618_p1();
    void thread_zext_ln544_fu_506_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
