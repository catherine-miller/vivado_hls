// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "writeheader.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic writeheader::ap_const_logic_1 = sc_dt::Log_1;
const bool writeheader::ap_const_boolean_1 = true;
const sc_lv<12> writeheader::ap_const_lv12_0 = "000000000000";
const sc_lv<64> writeheader::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_logic writeheader::ap_const_logic_0 = sc_dt::Log_0;

writeheader::writeheader(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( select_ln3_fu_72_p0 );
    sensitive << ( p_Result_s_fu_60_p5 );

    SC_METHOD(thread_p_Result_s_fu_60_p5);
    sensitive << ( bx_V );
    sensitive << ( orbit_V );
    sensitive << ( run_V );

    SC_METHOD(thread_select_ln3_fu_72_p0);
    sensitive << ( write_r );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "writeheader_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, bx_V, "(port)bx_V");
    sc_trace(mVcdFile, orbit_V, "(port)orbit_V");
    sc_trace(mVcdFile, run_V, "(port)run_V");
    sc_trace(mVcdFile, write_r, "(port)write_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, select_ln3_fu_72_p0, "select_ln3_fu_72_p0");
    sc_trace(mVcdFile, p_Result_s_fu_60_p5, "p_Result_s_fu_60_p5");
#endif

    }
    mHdltvinHandle.open("writeheader.hdltvin.dat");
    mHdltvoutHandle.open("writeheader.hdltvout.dat");
}

writeheader::~writeheader() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void writeheader::thread_ap_done() {
    ap_done = ap_start.read();
}

void writeheader::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void writeheader::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void writeheader::thread_ap_return() {
    ap_return = (!select_ln3_fu_72_p0.read()[0].is_01())? sc_lv<64>(): ((select_ln3_fu_72_p0.read()[0].to_bool())? p_Result_s_fu_60_p5.read(): ap_const_lv64_0);
}

void writeheader::thread_p_Result_s_fu_60_p5() {
    p_Result_s_fu_60_p5 = esl_concat<52,12>(esl_concat<40,12>(esl_concat<10,30>(run_V.read(), orbit_V.read()), bx_V.read()), ap_const_lv12_0);
}

void writeheader::thread_select_ln3_fu_72_p0() {
    select_ln3_fu_72_p0 =  (sc_lv<1>) (write_r.read());
}

void writeheader::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bx_V\" :  \"" << bx_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"orbit_V\" :  \"" << orbit_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"run_V\" :  \"" << run_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"write_r\" :  \"" << write_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

