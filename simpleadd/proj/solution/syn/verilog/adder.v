// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adder,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2L-e,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.543000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=11,HLS_VERSION=2019_2_1}" *)

module adder (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        ap_return
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] a_V;
input  [9:0] b_V;
output  [10:0] ap_return;

wire  signed [10:0] rhs_V_fu_30_p1;
wire  signed [10:0] lhs_V_fu_26_p1;

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ap_return = ($signed(rhs_V_fu_30_p1) + $signed(lhs_V_fu_26_p1));

assign lhs_V_fu_26_p1 = $signed(a_V);

assign rhs_V_fu_30_p1 = $signed(b_V);

endmodule //adder
